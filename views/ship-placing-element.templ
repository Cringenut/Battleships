package views

import (
	"Battleships/data"
	"Battleships/web"
	"fmt"
	"strconv"
)

templ MakeShipPlacementElement() {
<div class="fullscreen-container" id="fullscreen_container">

<style>
	.top-bar {
		height: 36px;
		display: flex;
		justify-content: center;
		align-items: center;
		background-color: transparent;
		padding: 12px;
		font-family: "Special Elite", system-ui;
		position: absolute;
		top: 0;
		width: 20%;
		z-index: 99999;
	}

	.center-text {
		color: #e7e6e6;
		display: flex; /* Add this line */
		justify-content: center; /* Add this line */
		align-items: center; /* Add this line */
		height: 36px;
		width: 160px;
		margin: 0 10px;
		text-align: center;
	}

	.top-bar button {
		font-size: 18px;
		margin: 0 10px;
	}

	footer {
		display: flex;
		justify-content: center;
		padding-top: 30px;
		background-color: transparent;
		font-family: "Special Elite", system-ui;
		position: fixed;
		bottom: 0;
		width: 100%;
		height: 32px; /* Adjust the height as needed */
	}

	.save-text {
		color: #e7e6e6;
		font-family: "Special Elite", system-ui;
		text-align: center;
		font-size: 20px;
	}
	.left-btn, .right-btn {
		color: #e7e6e6;
		user-select: none;
		cursor: pointer;
	}

	.left-btn:hover, .right-btn:hover, .save-text:hover {
		color: white;
		user-select: none;
		cursor: pointer;
	}

	.back-text {
		position: absolute;
		top: 0;
		left: 0;
		margin: 12px;
		padding: 12px;
		font-family: "Special Elite", system-ui;
		font-size: 14px;
		color: #e7e6e6;
		z-index: 10005;
		cursor: pointer;
		user-select: none;
	}

	.back-text:hover {
		color: white;
	}

	.fullscreen-container {
		position: fixed;
		top: 0;
		left: 0;
		height: 100%;
		width: 100%;
		background-color: red; /* Semi-transparent background */
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		z-index: 999; /* Ensures it is above other content */
		pointer-events: none; /* Ensures it doesn't capture any mouse events */
		box-sizing: border-box;
	}

</style>
<body>
<div class="top-bar">
	<div
			class="left-btn"
			hx-trigger="click"
			hx-post="/placement/switch"
			hx-target="#placement_container"
			hx-swap="innerHTML"
			hx-vals='{"chosenOption": "previous"}'
	>&#60</div>
	<span class="center-text">
				switch web.GetCurrentPlacementPlacementType() {
					case data.Simple:
						Simple
					case data.Advanced:
						Advanced
					case data.ServerRandom:
						Server Random
					case data.Random:
						Randomised
					default:
				}
			</span>
	<div
			class="right-btn"
			hx-trigger="click"
			hx-post="/placement/switch"
			hx-target="#placement_container"
			hx-swap="innerHTML"
			hx-vals='{"chosenOption": "next"}'
	>&#62</div>
</div>
<div>@MakePlacementElement()</div>
<footer>
	<div class="save-text"
			hx-trigger="click"
			hx-post="/placement/save"
			hx-target="#placement_container"
	>Save</div>
</footer>
<div class="back-text"
	 hx-post="placement/back"
	 hx-target="#fullscreen_container"
	 hx-swap="delete"
	 hx-trigger="click"
>Cancel</div>
</body>
</div>

}



templ MakePlacementElement() {
	<div id="placement_menu">
		switch web.GetCurrentPlacementPlacementType() {
			case data.Simple:
				@MakeSimplePlacementBoard()
			case data.Advanced:
				@MakeSimplePlacementBoard()
			case data.ServerRandom:
				SERVER RANDOM
			case data.Random:
				RANDOM
			default:
		}
	</div>
}

templ MakeSimplePlacementBoard() {
	<!DOCTYPE html>
	<html lang="en">
		<style>
        .top-bar button {
            font-size: 18px;
            margin: 0 10px;
        }
        .container {
            flex: 1;
            padding-bottom: 8px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            position: relative;
        }

        .main-container {
            display: flex;
            height: 100%;
            flex-direction: column;
            gap: 6px;
            min-height: 384px;
            min-width: 50px;
            transform: translateX(95%);
            margin-left: 194px;
            z-index: 5;
        }

        .squares-container {
            display: flex;
            gap: 6px;
        }

        .square {
            width: 70px;
            height: 70px;
            background-color: #222; /* Black squares, assuming a dark theme */
            display: flex;
            justify-content: center;
            align-items: flex-end; /* Align items at the bottom */
            color: white; /* Text color inside the square */
            font-size: 14px; /* Adjust text size as needed */
            padding-bottom: 4px; /* Add some padding at the bottom for spacing */
            position: relative; /* Required for positioning child elements */
            border-radius: 1px;
            flex: 1;
            aspect-ratio: 1;
            font-family: "Special Elite", system-ui;
            outline: 2px solid rgba(44, 44, 44, 0.9);
            z-index: 4;
        }

        .square img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            object-fit: contain; /* Ensures the image is fully visible */
            z-index: -1; /* Places the image behind the text */
            filter: brightness(0) invert(0.65);
        }

        .img1 img {
            height: 85%;
            scale: 75%;
        }

        .img2 img {
            height: 85%;
            scale: 70%;
        }

        .img3 img {
            height: 80%;
            scale: 60%;
        }

        .img4 img {
            height: 70%;
            scale: 70%;
        }

        .square:hover {
            cursor: pointer;
            outline-color: white;
        }

        .square:hover img {
            filter: brightness(0) invert(1);
        }

        footer {
            display: flex;
            flex-shrink: 0;
            justify-content: center;
            padding-top: 44px;
            background-color: transparent;
            font-family: "Special Elite", system-ui;
        }

        .clear-btn, .cancel-btn {
            height: 70px;
            flex: 1;
            display: flex; /* Add this line */
            color: #e7e6e6;
            justify-content: center; /* Add this line */
            align-items: center; /* Add this line */
            text-align: center;
            cursor: pointer;

            background-color: red;
            margin: 20px 100px;
        }

        .clear-btn:hover, .cancel-btn:hover {
            color: white;
        }

    </style>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link href="https://fonts.googleapis.com/css2?family=Special+Elite&display=swap" rel="stylesheet"/>
			<script src="https://unpkg.com/htmx.org@1.9.10" integrity="sha384-D1Kt99CQMDuVetoL1lrYwg5t+9QdHe7NLX/SoJYkXDFfX37iInKRy5xLSi8nO7UC" crossorigin="anonymous"></script>
			<title>Layout Example</title>
		</head>
		<body>
			<div class="container" id="placement_container">
				@MakePlacementBoard()
				<div class="main-container">
					<div class="squares-container">
						@MakeOneSquareLongPlacementButton(9, false)
						@MakeOneSquareLongPlacementButton(8, false)
						@MakeOneSquareLongPlacementButton(7, false)
						@MakeOneSquareLongPlacementButton(6, false)
					</div>
					<div class="squares-container">
						@MakeTwoSquareLongPlacementButton(5, false)
						@MakeTwoSquareLongPlacementButton(4, false)
						@MakeTwoSquareLongPlacementButton(3, false)
					</div>
					<div class="squares-container">
						@MakeThreeSquareLongPlacementButton(2, false)
						@MakeThreeSquareLongPlacementButton(1, false)
					</div>
					<div class="squares-container">
						@MakeFourSquareLongPlacementButton(0, false)
					</div>
					if web.GetPlacingShip() == nil {
						<div
							class="clear-btn"
							hx-trigger="click"
							hx-post="/placement/clear"
							hx-target="#placement_menu"
						>Clear all</div>
					} else {
						<div
							class="cancel-btn"
							hx-trigger="click"
							hx-post="/placement/cancel"
							hx-target="#placement_menu"
						>Cancel</div>
					}
				</div>
			</div>
		</body>
	</html>
}

func chosenButton(index int, isAdvanced bool) string {
	return fmt.Sprintf(`{"chosenOption": "%s", "isAdvanced": "%s"}`, strconv.Itoa(index), strconv.FormatBool(isAdvanced))
}

templ MakeOneSquareLongPlacementButton(index int, isAdvanced bool) {
	<div
		class="square img1"
		hx-trigger="click"
		hx-post="/placement/option"
		hx-target="#placement_menu"
		hx-vals={ chosenButton(index, isAdvanced) }
	>
		<img src="https://i.imgur.com/IpQ6loJ.png" alt="Image 1"/>
		{ web.GetShipCoords(index) }
	</div>
}

templ MakeTwoSquareLongPlacementButton(index int, isAdvanced bool) {
	<div
		class="square img2"
		hx-trigger="click"
		hx-post="/placement/option"
		hx-target="#placement_menu"
		hx-vals={ chosenButton(index, isAdvanced) }
	>
		<img src="https://i.imgur.com/OVSX1Hh.png" alt="Image 2"/>
		{ web.GetShipCoords(index) }
	</div>
}

templ MakeThreeSquareLongPlacementButton(index int, isAdvanced bool) {
	<div
		class="square img3"
		hx-trigger="click"
		hx-post="/placement/option"
		hx-target="#placement_menu"
		hx-vals={ chosenButton(index, isAdvanced) }
	>
		<img src="https://i.imgur.com/dTb4d3k.png" alt="Image 3"/>
		{ web.GetShipCoords(index) }
	</div>
}

templ MakeFourSquareLongPlacementButton(index int, isAdvanced bool) {
	<div
		class="square img4"
		hx-trigger="click"
		hx-post="/placement/option"
		hx-target="#placement_menu"
		hx-vals={ chosenButton(index, isAdvanced) }
	>
		<img src="https://i.imgur.com/XUlAbmN.png" alt="Image 4"/>
		{ web.GetShipCoords(index) }
	</div>
}


